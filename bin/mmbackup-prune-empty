#!/usr/bin/env python

import argparse
import os
import subprocess
import sys


IGNORE_NAMES = set('''
    .DS_Store
'''.strip().split())


parser = argparse.ArgumentParser()
parser.add_argument('-n', '--dry-run', action='store_true')
parser.add_argument('-v', '--verbose', action='store_true')
parser.add_argument('-y', '--yes', action='store_true')
args = parser.parse_args()


raw = subprocess.check_output(['sudo', 'zfs', 'list', '-tsnapshot', '-H', '-p', '-oname,used'])
raw = raw.splitlines()
raw = [x.strip().split('\t') for x in raw]

by_volume = {}
for snapshot, used in raw:
    volume, _ = snapshot.split('@', 1)
    by_volume.setdefault(volume, []).append((snapshot, used))

for volume, snapshots in sorted(by_volume.iteritems()):

    if args.verbose:
        print volume
        print '=' * 20

    for i, (snapshot, used) in enumerate(snapshots):

        used = int(used)

        if args.verbose:
            print '%s -> %s' % (snapshot, used)

        # Obviously too large.
        if used > 102400: # 100kB.
            continue

        # We never clean up the last one.
        if i == len(snapshots) - 1:
            continue

        # TODO: Test these.
        if used:
            cmd = ['zfs', 'diff', '-H', snapshot, snapshots[i + 1][0]]
            if args.verbose:
                print '    $', ' '.join(cmd)
            proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
            empty = True
            for line in proc.stdout:

                line = line.strip()
                if not line:
                    continue

                type_, path = line.split('\t')
                name = os.path.basename(path)
                if name in IGNORE_NAMES:
                    continue

                if args.verbose:
                    print '      Found change:', path
                empty = False
                break

            if not empty:
                continue


        cmd = ['sudo', 'zfs', 'destroy', snapshot]
        if args.verbose:
            print '    $', ' '.join(cmd)
        if not args.dry_run:
            yes = args.yes
            if not yes:
                res = raw_input('Delete %s ? [yN]: ' % snapshot).strip()
                yes = res.lower() in ('y', 'yes')
            if yes:
                subprocess.check_call(cmd)

    if args.verbose:
        print
    
 
