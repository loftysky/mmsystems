#!/usr/bin/env python

import argparse
import datetime
import re
import subprocess
import sys

from mmsystems.backup.prune import label_snapshots


parser = argparse.ArgumentParser()

parser.add_argument('-e', '--exclude', action='append', default=[])
parser.add_argument('-i', '--include', action='append', default=[])
parser.add_argument('-n', '--dry-run', action='store_true')
parser.add_argument('-v', '--verbose', action='store_true')
parser.add_argument('-y', '--yes', action='store_true')

args = parser.parse_args()


by_volume = {}

for line in subprocess.check_output(['sudo', 'zfs', 'list', '-H', '-o', 'name,mm.backup:prune']).splitlines():
    
    line = line.strip()
    if not line:
        continue
    volume, do_prune = line.strip().split('\t')

    if volume in args.exclude:
        print "Skipping excluded", volume, "."
        continue
    if volume not in args.include and do_prune.upper() not in ('1', 'Y', 'YES', 'T', 'TRUE'):
        if args.verbose:
            print "Skipping", volume, "because `mm.backup:prune` is not set."
        continue

    for line in subprocess.check_output(['sudo', 'zfs', 'list',
        '-t', 'snapshot',
        '-r', '-d', '1',
        '-H', '-o', 'name',
        volume,
    ]).splitlines():
        snapshot = line.strip()
        if not snapshot:
            continue
        raw_ctime = snapshot.split('@', 1)[1]
        by_volume.setdefault(volume, []).append((snapshot, raw_ctime))


for volume, snapshots in sorted(by_volume.iteritems()):

    if args.verbose:
        print volume
        print '=' * 20

    labels = label_snapshots(snapshots)

    for snapshot, raw_ctime in sorted(snapshots):
        label = labels.get(snapshot)
        if args.verbose:
            print '%7s %s' % (label or '-', snapshot)
        if not label:
            cmd = ['sudo', 'zfs', 'destroy', snapshot]
            if args.verbose:
                print '            $', ' '.join(cmd)
            if not args.dry_run:
                yes = args.yes
                if not yes:
                    res = raw_input('Delete %s ? [yN]: ' % snapshot).strip()
                    yes = res.lower() in ('y', 'yes')
                if yes:
                    subprocess.check_call(cmd)

    if args.verbose:
        print
    
 
