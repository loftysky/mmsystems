#!/usr/bin/env python

from __future__ import print_function


import argparse
import os
import subprocess
import sys
import socket

from mmsystems.ssh import SSHPool

parser = argparse.ArgumentParser()
parser.add_argument('--restart', action='store_true')
parser.add_argument('--stop', action='store_true')
parser.add_argument('-d', '--display', type=int, default=os.getuid())
# parser.add_argument('host', nargs='?')
args = parser.parse_args()


if False: #args.host:

    ssh = SSHPool(args.host)
    def call(cmd):
        return 0, ssh.exec_command(cmd).get(), ''

    platform = call('uname')[1].strip().lower()
    host = args.host

else:

    def call_output(cmd):
        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = proc.communicate()
        return proc.returncode, out, err

    def call(cmd):
        return subprocess.check_call(cmd)

    platform = sys.platform
    host = socket.gethostname()


if not platform.startswith('linux'):
    print("mmvnc only works on Linux.", file=sys.stderr)
    if platform == 'darwin':
        print("Please use Apple's builtin service.")
    exit(1)

raw_existing = call_output(['vncserver', '-list'])[1]
existing = set(int(x.split()[0][1:]) for x in raw_existing.splitlines() if x.startswith(':'))


do_stop = args.restart or args.stop
do_start = args.restart or not args.stop

if do_stop:
    if args.display not in existing:
        print("vncserver is not already running.")
        exit(1)
    call(['vncserver', '-kill', ':{}'.format(args.display)])

if do_start:
    if args.display in existing:
        print("vncserver is already running.")
    else:
        print("Starting vncserver...", file=sys.stderr)
        call(['vncserver', ':{}'.format(args.display)])

print('Please connect to ', end='', file=sys.stderr)
print('vnc://{}:{}'.format(host, 5900 + args.display))
