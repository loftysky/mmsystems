#!/usr/bin/env python

import argparse
import datetime
import os
import re
import subprocess
import sys
import time

from mmsystems.backup.prune import label_snapshots


IGNORE_NAMES = set('''
    .DS_Store
'''.strip().split())


parser = argparse.ArgumentParser()

parser.add_argument('-i', '--include', action='append', default=[])
parser.add_argument('-e', '--exclude', action='append', default=[])

parser.add_argument('-n', '--dry-run', action='store_true')
parser.add_argument('-y', '--yes', action='store_true')

parser.add_argument('-v', '--verbose', action='count')

parser.add_argument('command', choices=['auto', 'snapshot', 'prune', 'prune-timed', 'prune-empty'])
parser.add_argument('volumes', nargs='?')

args = parser.parse_args()


timestamp = time.strftime('%Y-%m-%dT%H%z')


do_snapshot = args.command in ('auto', 'snapshot')
do_prune_timed = args.command in ('auto', 'prune', 'prune-timed')
do_prune_empty = args.command in ('auto', 'prune', 'prune-empty')


def destroy(snapshot):
    cmd = ['sudo', 'zfs', 'destroy', snapshot]
    if args.verbose:
        print '    $', ' '.join(cmd)
    if not args.dry_run:
        yes = args.yes
        if not yes:
            res = raw_input('Delete %s ? [yN]: ' % snapshot).strip()
            yes = res.lower() in ('y', 'yes')
        if yes:
            subprocess.check_call(cmd)


code = 0

for line in subprocess.check_output(['sudo', 'zfs', 'list', '-H', '-o', 'name,mm:auto-snapshot']).splitlines():
    
    line = line.strip()
    if not line:
        continue
    volume, is_auto = line.strip().split('\t')

    if args.volumes:
        if volume not in args.volumes:
            continue
    else:
        if volume in args.exclude:
            if args.verbose:
                print "Skipping excluded", volume, "."
            continue
        elif volume in args.include:
            pass
        elif is_auto.upper() in ('1', 'Y', 'YES', 'T', 'TRUE'):
            pass
        else:
            if args.verbose > 1:
                print "Skipping", volume, "because `mm:auto-snapshot` is not set."
            continue

    if args.verbose:
        print
        print volume
        print '=' * 20


    if do_snapshot:
        cmd = ['sudo', 'zfs', 'snapshot', '{}@{}'.format(volume, timestamp)]
        if args.verbose > 1:
            print '$', ' '.join(cmd)
        if not args.dry_run:
            this_code = subprocess.call(cmd)
            code = code or this_code
            if this_code:
                print 'ERROR: Non-zero return code {} from: {}'.format(this_code, ' '.join(cmd))
                continue

    if not (do_prune_timed or do_prune_empty):
        continue

    snapshots = []

    for line in subprocess.check_output(['sudo', 'zfs', 'list',
        '-t', 'snapshot',
        '-r', '-d', '1',
        '-Hp', '-o', 'name,used,mm:_nonempty',
        volume,
    ]).splitlines():
        line = line.strip()
        if not line:
            continue
        snapshot, used, nonempty = line.split('\t')
        raw_ctime = snapshot.split('@', 1)[1]
        snapshots.append((snapshot, raw_ctime, int(used), nonempty))

    snapshots.sort()

    if do_prune_empty:
        # Skip the last, and go backwards so we can pop them out
        # of the master list.
        to_check = reversed(list(enumerate(snapshots))[:-1])
        for i, (snapshot, raw_ctime, used, nonempty) in to_check:

            if args.verbose > 1:
                print '%s -> %s' % (snapshot, used)

            # Obviously too large.
            if used > 1024**2: #102400: # 100kB.
                continue

            # We've already checked it.
            if nonempty == '1':
                continue

            if used:

                cmd = ['sudo', 'zfs', 'diff', '-H', snapshot, snapshots[i + 1][0]]
                if args.verbose:
                    print '    $', ' '.join(cmd)
                proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)

                empty = True
                for line in proc.stdout:

                    line = line.strip()
                    if not line:
                        continue

                    type_, path = line.split('\t')
                    name = os.path.basename(path)
                    if name in IGNORE_NAMES:
                        continue

                    if args.verbose:
                        print '      Found change:', path
                    empty = False
                    break

                if not empty:
                    cmd = ['sudo', 'zfs', 'set', 'mm:_nonempty=1', snapshot]
                    if args.verbose > 1:
                        print '$', ' '.join(cmd)
                    subprocess.check_call(cmd)
                    continue

            # At this point they are empty!
            destroy(snapshot)
            snapshots.pop(i)

    labels = label_snapshots([x[:2] for x in snapshots])

    for snapshot, raw_ctime, used, nonempty in sorted(snapshots):
        label = labels.get(snapshot)
        if args.verbose:
            print '%7s %s' % (label or '-', snapshot)
        if not label:
            destroy(snapshot)

    if args.verbose:
        print
    
 
